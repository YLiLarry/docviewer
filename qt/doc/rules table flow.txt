switch(User input) {
case (Modifies rules):
    if (Webpage is null?) { Do nothing; } else {
        [Controller] currentWebpageCrawlerRuleTable[Enable/Add/Disable/Remove/Modify]Async(const Rule&, ...);
        [Controller] current_tab_webpage()->crawler_rule_table()->(enable/add/disable/remove/modify)(...);
        branch(_) {
            [Crawler] updateRulesAsync(const CrawlerRuleTable&);
        }
        [Webpage] updateCrawlerRuleTableMatches();
        [Webpage] writePartialTableToSettings();
        [Webpage] emit_crawler_rule_table_changed();
        CONTROLLER_MAY_NEED_TO_RESET_CURRENT_TABLE:
        if (Changes are for current webpage?) {
            [Controller] set_current_webpage_crawler_rule_table(const RuleTable&);
            [Controller] emit_current_webpage_crawler_rule_table_changed();
            [UI] handleCurrentWebpageCrawlerRuleTableChanged(); // this should not trigger user modified rules event again 
        } else {
            Do nothing;
        }
    }
break;
 
case (Opens rule table view):
    [UI] controller->showRuleTableAsync();
    [Controller] emit_tf_show_rule_table();
    [UI] handleShowCrawlerRuleTable();
break;
 
case (Closes rule table view):
    [UI] controller->hideRuleTableAsync();
    [Controller] emit_tf_hide_rule_table();
    [UI] handleShowCrawlerRuleTable();
break;

case (Changes current webpage):
    [UI] controller->viewTabAsync(int);
    branch(_) {
        [Controller] emit_tf_hide_rule_table();
        [UI] handleHideCrawlerRuleTable();
    }
    if (Webpage is null?) {
        branch(_) {
            [Controller] emit_tf_disable_rule_table();
            [UI] handleDisableCrawlerRuleTable();
        }
    } else {
        branch(_) {
            [Controller] emit_tf_enable_rule_table();
            [UI] handleEnableCrawlerRuleTable();
        }
        branch(_) {
            goto WEBPAGE_RELOAD_CRAWLER_RULE_TABLE;
        }
    }        

break;
 
case (Changes url):
    [UI] controller->currentTabWebpageGoAsync(const Url&)
    [Webpage] set_url(const Url);
    WEBPAGE_RELOAD_CRAWLER_RULE_TABLE:
    [RuleTable] readTableForUrlFromSettings(Url);
    if ([RuleTable] table empty?) {
        [RuleTable] defaultTableForUrl(Url);
    }
    [Webpage] set_crawler_rule_table(const RuleTable&);
    [Webpage] emit_crawler_rule_table_changed();
    goto CONTROLLER_MAY_NEED_TO_RESET_CURRENT_TABLE;
break;

}
